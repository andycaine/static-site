AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A simple static site stack.
Globals:
  Function:
    Timeout: 10
    MemorySize: 128

Metadata:
  AWS::ServerlessRepo::Application:
    Name: static-site
    Description: A simple static site stack.
    Author: Andy Caine
    SemanticVersion: 0.4.3
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    ReadmeUrl: README.md
    Labels: ['cloudformation', 's3']
    HomePageUrl: https://github.com/andycaine/static-site#readme
    SourceCodeUrl: https://github.com/andycaine/static-site
Parameters:
  StaticAssetsLayerArn:
    Type: String
    Description: ARN of the layer containing the static assets to deploy.
  ContentSecurityPolicy:
    Type: String
    Description: The content security policy
    Default: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'; frame-ancestors 'none'"
  CacheControl:
    Type: String
    Description: The cache control header
    Default: "max-age=31536000, immutable"
  DomainName:
    Type: String
    Description: The domain name of the site (leave blank for *.cloudfront.net)
    Default: ""
  HostedZoneId:
    Type: String
    Description: HostedZoneId for the Domain
    Default: ""
  WebCertificateArn:
    Type: String
    Description: The ARN of the web certificate to use for the site - must be in us-east-1.
    Default: ""

Conditions:
  HasContentSecurityPolicy: !Not [!Equals [!Ref ContentSecurityPolicy, '']]
  HasDomainName: !Not [!Equals [!Ref DomainName, ""]]

Resources:
  StaticAssetsDeployment:
    Type: AWS::Serverless::Application
    Properties:
      Location:
        ApplicationId: 'arn:aws:serverlessrepo:eu-west-2:211125310871:applications/static-assets-deployment'
        SemanticVersion: 0.3.2
      Parameters:
        StaticAssetsBucket: !Ref SiteStaticAssetsBucket
        StaticAssetsLayerArn: !Ref StaticAssetsLayerArn
        CacheControl: !Ref CacheControl

  SiteStaticAssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SiteStaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteStaticAssetsBucket
      PolicyDocument:
        Statement:
          - Sid: AllowReadOAC
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOAI.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub "${SiteStaticAssetsBucket.Arn}/*"

  CloudFrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OAI for ${AWS::StackName}'

  RewriteDefaultIndexCloudFrontFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Ref AWS::StackName
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          var request = event.request;
          var uri = request.uri;

          if (uri.endsWith("/")) {
              request.uri += "index.html";
          } else if (!uri.includes(".")) {
              request.uri += "/index.html";
          }
          return request;
        }
      FunctionConfig:
        Comment: "Rewrite paths to load index.html from s3"
        Runtime: cloudfront-js-1.0

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: WebSecurityHeadersPolicy
        Comment: Common web security response headers
        SecurityHeadersConfig:
          ContentSecurityPolicy:
            ContentSecurityPolicy: !If [HasContentSecurityPolicy, !Ref ContentSecurityPolicy, !Ref AWS::NoValue]
            Override: false
          ContentTypeOptions: # sets to nosniff
            Override: false
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: strict-origin-when-cross-origin
            Override: true
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Preload: true
            Override: false
          XSSProtection:
            ModeBlock: true
            Protection: true
            Override: true

  CloudFrontDistro:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: SiteStaticAssets
            DomainName: !GetAtt SiteStaticAssetsBucket.RegionalDomainName
            OriginPath: !Sub /${StaticAssetsDeployment.Outputs.DeploymentFolder}
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOAI}'
        Enabled: true
        HttpVersion: http2and3
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: /404.html
        DefaultCacheBehavior:
          AllowedMethods:
            - HEAD
            - GET
            - OPTIONS
          TargetOriginId: SiteStaticAssets
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # caching optimised
          Compress: true
          ResponseHeadersPolicyId: !Ref ResponseHeadersPolicy
          ViewerProtocolPolicy: redirect-to-https
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !GetAtt RewriteDefaultIndexCloudFrontFunction.FunctionARN
        PriceClass: PriceClass_100
        Logging:
          Bucket: !GetAtt AccessLogBucket.DomainName
          IncludeCookies: false
          Prefix: !Sub "AWSLogs/${AWS::AccountId}/cloudfront/"
        ViewerCertificate: !If
          - HasDomainName
          - AcmCertificateArn: !Ref WebCertificateArn
            MinimumProtocolVersion: TLSv1.2_2021
            SslSupportMethod: sni-only
          - CloudFrontDefaultCertificate: true
        #WebACLId: xxx
        Aliases: !If
          - HasDomainName
          - - !Ref DomainName
          - !Ref AWS::NoValue

  AccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: RetentionRule
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 30
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred

  WebRecordSetGroup:
    Type: "AWS::Route53::RecordSetGroup"
    Condition: HasDomainName
    Properties:
      HostedZoneId: !Ref HostedZoneId
      RecordSets:
        - AliasTarget:
            DNSName: !GetAtt CloudFrontDistro.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
          Name: !Ref DomainName
          Type: A
        - AliasTarget:
            DNSName: !GetAtt CloudFrontDistro.DomainName
            EvaluateTargetHealth: false
            HostedZoneId: Z2FDTNDATAQYW2 # CloudFront hosted zone ID
          Name: !Ref DomainName
          Type: AAAA

Outputs:
  URL:
    Description: Site URL
    Value: !Sub "https://${CloudFrontDistro.DomainName}"
